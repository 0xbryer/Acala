// This file is part of Acala.

// Copyright (C) 2020-2022 Acala Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for module_account_tokenizer
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-03-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/acala
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=module_account_tokenizer
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./modules/account-tokenizer/src/weights.rs
// --template=./templates/module-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for module_account_tokenizer.
pub trait WeightInfo {
	fn initialize_nft_class() -> Weight;
	fn request_mint() -> Weight;
	fn confirm_mint_request() -> Weight;
	fn request_redeem() -> Weight;
	fn confirm_redeem_account_token() -> Weight;
	fn transfer_nft() -> Weight;
	fn burn_nft() -> Weight;
	fn transfer_treasury_funds() -> Weight;
	fn force_unreserve_funds() -> Weight;
	fn remint_burned_nft() -> Weight;
}

/// Weights for module_account_tokenizer using the Acala node and recommended hardware.
pub struct AcalaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AcalaWeight<T> {
	// Storage: unknown [0x313d68a8253b2369f4110c7a64e961de4e7b9012096b41c4eb3aaf947f6ea429] (r:1 w:1)
	// Storage: System Account (r:3 w:3)
	// Storage: OrmlNFT NextClassId (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: AccountTokenizer NFTClassId (r:0 w:1)
	// Storage: OrmlNFT Classes (r:0 w:1)
	fn initialize_nft_class() -> Weight {
		(82_869_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: AccountTokenizer MintedAccount (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: ForeignStateOracle NextQueryId (r:1 w:1)
	// Storage: ForeignStateOracle QueryRequests (r:0 w:1)
	fn request_mint() -> Weight {
		(65_923_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: ForeignStateOracle QueryRequests (r:1 w:1)
	// Storage: TransactionPause PausedTransactions (r:1 w:0)
	// Storage: AccountTokenizer MintedAccount (r:1 w:1)
	// Storage: AccountTokenizer NFTClassId (r:1 w:0)
	// Storage: OrmlNFT Classes (r:1 w:1)
	// Storage: System Account (r:3 w:3)
	// Storage: OrmlNFT NextTokenId (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: OrmlNFT Tokens (r:0 w:1)
	// Storage: OrmlNFT TokensByOwner (r:0 w:1)
	fn confirm_mint_request() -> Weight {
		(100_245_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	// Storage: AccountTokenizer NFTClassId (r:1 w:0)
	// Storage: AccountTokenizer MintedAccount (r:1 w:0)
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Storage: XcmInterface XcmDestWeightAndFee (r:1 w:0)
	// Storage: ParachainInfo ParachainId (r:1 w:0)
	// Storage: ParachainSystem HostConfiguration (r:1 w:0)
	// Storage: ParachainSystem PendingUpwardMessages (r:1 w:1)
	// Storage: System Account (r:3 w:3)
	// Storage: ForeignStateOracle NextQueryId (r:1 w:1)
	// Storage: OrmlNFT Classes (r:1 w:0)
	// Storage: Balances Reserves (r:2 w:2)
	// Storage: ForeignStateOracle QueryRequests (r:0 w:1)
	// Storage: OrmlNFT TokensByOwner (r:0 w:2)
	fn request_redeem() -> Weight {
		(120_361_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	// Storage: ForeignStateOracle QueryRequests (r:1 w:1)
	// Storage: TransactionPause PausedTransactions (r:1 w:0)
	fn confirm_redeem_account_token() -> Weight {
		(18_819_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: AccountTokenizer NFTClassId (r:1 w:0)
	// Storage: AccountTokenizer MintedAccount (r:1 w:0)
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Storage: OrmlNFT Classes (r:1 w:0)
	// Storage: Balances Reserves (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: OrmlNFT TokensByOwner (r:0 w:2)
	fn transfer_nft() -> Weight {
		(76_443_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: AccountTokenizer NFTClassId (r:1 w:0)
	// Storage: AccountTokenizer MintedAccount (r:1 w:1)
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Storage: OrmlNFT Classes (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: OrmlNFT TokensByOwner (r:0 w:1)
	fn burn_nft() -> Weight {
		(49_403_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: System Account (r:2 w:2)
	fn transfer_treasury_funds() -> Weight {
		(25_563_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn force_unreserve_funds() -> Weight {
		(27_459_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: AccountTokenizer NFTClassId (r:1 w:0)
	// Storage: AccountTokenizer MintedAccount (r:1 w:1)
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Storage: OrmlNFT Classes (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: OrmlNFT NextTokenId (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: OrmlNFT TokensByOwner (r:0 w:1)
	fn remint_burned_nft() -> Weight {
		(77_283_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn initialize_nft_class() -> Weight {
		(82_869_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	fn request_mint() -> Weight {
		(65_923_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn confirm_mint_request() -> Weight {
		(100_245_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(10 as Weight))
	}
	fn request_redeem() -> Weight {
		(120_361_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(11 as Weight))
	}
	fn confirm_redeem_account_token() -> Weight {
		(18_819_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn transfer_nft() -> Weight {
		(76_443_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	fn burn_nft() -> Weight {
		(49_403_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn transfer_treasury_funds() -> Weight {
		(25_563_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn force_unreserve_funds() -> Weight {
		(27_459_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn remint_burned_nft() -> Weight {
		(77_283_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
}
